import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.PriorityQueue;
import java.util.Queue;
import java.util.Random;
import java.util.Set;
public class GenerateBoards {
	public static void main(String[] args) {

		Set<Integer> closedSet = new HashSet<Integer>();
		int[] solved = {0,1,2,3,4,5,6,7,8};
		AStar a = new AStar(solved);
		//List<AStar> l = new ArrayList<AStar>();

		int numMoves=40;

		System.out.println(a);
		//l.add(a);



		//	System.out.println(l);

		//int nodesGenerated = 1;

		//AStar currentNode = a;

		for(int n = 0; n < 10000; n ++){
			AStar currentNode = a;

			for (int i=0; i<numMoves; i++){
				closedSet.add(currentNode.getHash());
				List<AStar> l = currentNode.possMoves(currentNode); //new ArrayList<AStar>();

				int size = l.size() - 1;
				Random rand = new Random();
				int randomNum = rand.nextInt((size - 0) + 1);

				//if (!closedSet.contains(currentNode.getHash())){
				currentNode=l.get(randomNum);
				//[}
				//			else {
				//				while (closedSet.contains(currentNode.getHash())){
				//					int size = l.size() - 1;
				//					Random rand = new Random();
				//					int randomNum = rand.nextInt((size - 0) + 1);
				//					currentNode
				//				}
				//			}


				//System.out.println(l.get(randomNum));
			}
			AStar randAStar = new AStar();
			if(randAStar.isSolvable()){
			File log = new File("in.txt");
			PrintWriter out;
			try {
				out = new PrintWriter(new FileWriter(log, true));
				out.write( print(new AStar()) + "\n");
				out.close();
				
			} 
			catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			}
			System.out.println(print(currentNode));
		}


	}
	private static String print(AStar a){
		String toReturn="{";
		for(int i =0; i<a.size; i++){
			for(int j = 0; j < a.size; j++){
				toReturn+= a.getBoard()[i][j] + ", ";
			}
		}
		int length = toReturn.length();
		toReturn = toReturn.substring(0, length-2) + "}";
		return toReturn;
	}
}
